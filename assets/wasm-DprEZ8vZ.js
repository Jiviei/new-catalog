import{onFSWasmCallback as d}from"./wasm-BFlDjNAw.js";import{onGitWasmCallback as w}from"./wasm-Dbw6nZ6M.js";import{D as e,f as p,s as m}from"./index--Cfhpedu.js";import"./DFPIOError-BdIHcG5c.js";const i=()=>new e(void 0,void 0,{errorCode:"wasmInitTimeout"}),c=()=>new e(void 0,void 0,{errorCode:"notHttps"}),f=()=>{if(!(typeof window<"u"&&window.navigator.storage&&window.SharedArrayBuffer&&window.WebAssembly&&window.Worker))throw i()},l=()=>{if(!window.isSecureContext||!window.crossOriginIsolated)throw c()},u=async()=>{await window.navigator.storage.persisted()||await window.navigator.storage.persist()},W=async r=>{l(),f(),await u();const o=window;o.wasm=new Worker(new URL(""+new URL("wasm.worker-vGCgh4YS.js",import.meta.url).href,import.meta.url),{type:"module"}),await new Promise((n,s)=>{setTimeout(()=>s(i()),2e4),o.wasm.onerror=t=>s(t),o.wasm.addEventListener("message",t=>{if(t.data.type=="fs-call"&&d(t),t.data.type=="git-call"&&w(t),t.data.type=="clone-progress"){const a=t.data?.data;if(!a?.data)return;p[a.data.id]?.(a)}t.data.type=="ready"&&n(o.wasm)})}),m(r)};export{W as initWasm};
