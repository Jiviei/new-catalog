import{R as p,V as B,h as u,B as S,_ as I,g as d,t as y}from"./index--Cfhpedu.js";import{S as x,A as v}from"./Square-CuMbXaPi.js";class P extends p{static async getImageByPath(a){const{path:e,resourceManager:t,defaultValue:n,maxWidth:s,maxHeight:g,crop:m,objects:h,scale:i}=a;if(e.extension==="svg+xml")return await this.getImageFromSvgPath(e,t);const r=await this.getFileByPath(e,t),o=this._calculateScaledDimension(s,n,i),c=this._calculateScaledDimension(g,B,i),_=await u.getImageSizeFromImageData(r),{imageBuffer:w,size:D}=await this._cropImage(r,r,_,m),f=await u.getImageSizeFromImageData(w,o,c);return!i||this._scaleSize(f,o),{imageBuffer:await this._addObjectsToImage(f,w,h,o,n),size:f}}static async _cropImage(a,e,t,n){return n&&(a=S.from(await this._cropImageToBuffer(e,n,t)),t=await u.getImageSizeFromImageData(a)),{imageBuffer:a,size:t}}static async _cropImageToBuffer(a,e,t){const n=(await I(async()=>{const{default:r}=await import("sharp");return{default:r}},[],import.meta.url)).default,s=Math.round(t.width*e.x/100),g=Math.round(t.height*e.y/100),m=Math.round(t.width*e.w/100),h=Math.round(t.height*e.h/100),i=await n(a).extract({left:s,top:g,width:m,height:h}).png().toBuffer();return new Uint8Array(i)}static async _addObjectsToImage(a,e,t,n,s){if(t?.length>0){const{createCanvas:g,loadImage:m}=await I(async()=>{const{createCanvas:o,loadImage:c}=await import("canvas");return{createCanvas:o,loadImage:c}},[],import.meta.url),h=await m(e),i=g(a.width*d,a.height*d),r=i.getContext("2d");if(!r)throw new Error(y("word.error.canvas-error"));return r.scale(d,d),r.drawImage(h,0,0,a.width,a.height),t.forEach((o,c)=>{o.type==="square"?new x(n??s,a.width).draw(r,o,(c+1).toString(),a,t.length>1):o.type==="annotation"&&new v(n??s,a.width).draw(r,o,(c+1).toString(),a,t.length>1)}),i.toBuffer("image/png")}return e}}const T=l=>P.getImageByPath(l);export{T as default};
