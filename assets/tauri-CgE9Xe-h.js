import{L as c,f as l}from"./index--Cfhpedu.js";import{i as r,t as d,c as u}from"./core-yl-nhWiC.js";var o;(function(e){e.WINDOW_RESIZED="tauri://resize",e.WINDOW_MOVED="tauri://move",e.WINDOW_CLOSE_REQUESTED="tauri://close-requested",e.WINDOW_DESTROYED="tauri://destroyed",e.WINDOW_FOCUS="tauri://focus",e.WINDOW_BLUR="tauri://blur",e.WINDOW_SCALE_FACTOR_CHANGED="tauri://scale-change",e.WINDOW_THEME_CHANGED="tauri://theme-changed",e.WINDOW_CREATED="tauri://window-created",e.WEBVIEW_CREATED="tauri://webview-created",e.DRAG_ENTER="tauri://drag-enter",e.DRAG_OVER="tauri://drag-over",e.DRAG_DROP="tauri://drag-drop",e.DRAG_LEAVE="tauri://drag-leave"})(o||(o={}));async function D(e,s){await r("plugin:event|unlisten",{event:e,eventId:s})}async function f(e,s,a){var t;const n=(t=void 0)!==null&&t!==void 0?t:{kind:"Any"};return r("plugin:event|listen",{event:e,target:n,handler:d(s)}).then(i=>async()=>D(e,i))}f("clone-progress",e=>{const s=e.payload;l[s.data.id]?.(s)});const g=e=>{try{return typeof e=="string"?JSON.parse(e):{message:e.message,class:e.class,code:e.code}}catch{return{message:e,class:-1,code:-1}}},W=async(e,s)=>{s?.scope==="HEAD"&&(s.scope=null);try{if(e=="git_read_file"){const a=await fetch(u("","gramax-gitfs-stream"),{method:"POST",body:JSON.stringify(s)});if(a.ok)return await a.arrayBuffer();const t=await a.json();throw s?.creds?.accessToken&&(s.creds.accessToken="<redacted>"),new c(`git (${e}, ${t.class??"<unknown class>"}, ${t.code??"<unknown code>"})`,`${t.message?.trim()||t}
Args:${JSON.stringify(s,null,4)}`,t.class,t.code,e)}return await r(`plugin:plugin-gramax-git|${e}`,s)}catch(a){s?.creds?.accessToken&&(s.creds.accessToken="<redacted>");const t=g(a);throw new c(`git (${e}, ${t.class??"<unknown class>"}, ${t.code??"<unknown code>"})`,`${t.message?.trim()}
Args: ${JSON.stringify(s,null,4)}`,t.class,t.code,e)}};export{W as call};
