import{p as f,B as d,I as m}from"./index--Cfhpedu.js";const a=window[m.DIRECTORY]||{name:"docs",children:[{name:"/",children:[]}]},w=async(e,n)=>await h[e](n),h={read_dir:({path:e})=>{const n=s(e);if(n?.type==="dir")return n.children.map(t=>t.name);throw new Error(`Directory not found or is a file: ${e}`)},read_file:async({path:e})=>{if(s(e)?.type==="file"){const t=new URL(f.join(document.baseURI,e)).href;return d.from(await(await fetch(t)).arrayBuffer())}else throw new Error(`File not found or is a directory: ${e}`)},read_link:()=>{throw new Error("Not implemented")},getstat:({path:e})=>({type:s(e).type}),rmfile:()=>{throw new Error("Not implemented")},exists:({path:e})=>!!s(e),write_file:({path:e,content:n})=>{const t=e.split("/").filter(Boolean),o=t.pop(),r=t.join("/"),i=s(r);if(!i||i.type!=="dir")throw new Error(`Directory not found: ${r}`);const c=i.children.find(l=>l.name===o);c&&"content"in c&&(c.content=n)},make_dir:({path:e})=>{const n=e.split("/").filter(Boolean);let t=a;for(const o of n){let r=t.children.find(i=>i.name===o&&"children"in i);if(!r)r={name:o,type:"dir",children:[]},t.children.push(r);else throw new Error(`Directory not found: ${o}`);t=r}}};function s(e){const n=e.split("/").filter(Boolean);let t=a;for(const o of n){const r=t.children?.find(i=>i.name===o);if(!r)return null;t=r}return t}export{w as StaticCall};
